<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/***********************************
 Configuration Parameters
************************************/

// Grid size
const int N_COLS = 10; // x
const int N_ROWS = 10; // y

// Drone vision range
const int N_v = 2;

// Assistance duration of first responders
const int T_fr = 5;
// Assistance duration of zero responders
const int T_zr = 8;

// Time after which a survivor in need dies
const int T_v = 15;


/***********************************
 Global Variables &amp; Constants
************************************/

// Map cell status enumeration
const int CELL_FIRST =          0;

const int CELL_EMPTY =          CELL_FIRST + 0;
const int CELL_FIRE =           CELL_FIRST + 1;
const int CELL_EXIT =           CELL_FIRST + 2;
const int CELL_DRONE =          CELL_FIRST + 3;
const int CELL_FIRST_RESP =     CELL_FIRST + 4;
const int CELL_ZERO_RESP =      CELL_FIRST + 5;
const int CELL_PERSON_IN_NEED = CELL_FIRST + 6;
const int CELL_CASUALTY =       CELL_FIRST + 7;

const int CELL_LAST =           CELL_FIRST + 7;

// Map
int[CELL_FIRST,CELL_LAST] map[N_COLS][N_ROWS];

// Channels
chan assist_start[N_COLS][N_ROWS];   // Channels for signaling that a survivor in need is being assisted
chan assist_request[N_COLS][N_ROWS]; // Channels for signaling that a survivor should start acting as a zero responder
chan assist_success[N_COLS][N_ROWS]; // Channels for signaling that an assistance was completed successfully

// The global initializion channel
urgent broadcast chan init_done;

// Moving policy step struct
typedef struct {
    int x_inc;
    int y_inc;
} MovingPolicyStep;


/***********************************
 Util functions
************************************/

// Returns the maximum between the two given integers
int imax(int a, int b) {
    if (a &gt;= b)
        return a;
    else
        return b;
}

// Returns the minimum between the two given integers
int imin(int a, int b) {
    if (a &lt;= b)
        return a;
    else
        return b;
}

// Returns the interger value clamped to the range [lower, upper]
int iclamp(int value, int lower, int upper) {
    return imax(lower, imin(value, upper));
}

// Functions

bool is_fire_near(int x, int y, const int radius) {
    int x_lower = imax(x - radius, 0);
    int x_upper = imin(x + radius, N_COLS);
    int y_lower = imax(y - radius, 0);
    int y_upper = imin(y + radius, N_ROWS);

    int i, j;
    for (i = x_lower; i &lt;= x_upper; i += 1)
        for (j = y_lower; j &lt;= y_upper; j += 1)
            if (map[i][j] == CELL_FIRE)
                return true;

    return false;
}
</declaration>
	<template>
		<name x="5" y="5">Initializer</name>
		<declaration>void init_assignment_example() {
    // Init the map will all empty cells
    for(x : int[0, N_ROWS-1]) {
        for(y : int[0, N_COLS-1]) {
            map[x][y] = CELL_EMPTY;
        }
    }

    // Set fires
    map[5][1] = CELL_FIRE;
    map[6][1] = CELL_FIRE;
    map[5][2] = CELL_FIRE;
    map[6][2] = CELL_FIRE;
    map[4][3] = CELL_FIRE;
    map[5][3] = CELL_FIRE;
    map[6][3] = CELL_FIRE;
    map[4][4] = CELL_FIRE;
    map[5][4] = CELL_FIRE;

    // Set exits
    map[0][4] = CELL_EXIT;
    map[9][4] = CELL_EXIT;
    map[0][5] = CELL_EXIT;
    map[9][5] = CELL_EXIT;

    // Set first responders
    map[6][5] = CELL_FIRST_RESP;

    // Set zero responders
    map[1][0] = CELL_ZERO_RESP;
    map[3][5] = CELL_ZERO_RESP;
    map[5][6] = CELL_ZERO_RESP;
    map[4][7] = CELL_ZERO_RESP;
    map[6][8] = CELL_ZERO_RESP;
    map[3][9] = CELL_ZERO_RESP;

    // Set persons in need
    map[3][3] = CELL_PERSON_IN_NEED;
    map[6][4] = CELL_PERSON_IN_NEED;
}
</declaration>
		<location id="id0" x="272" y="0">
		</location>
		<location id="id1" x="0" y="0">
			<committed/>
		</location>
		<init ref="id1"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="17" y="0">init_done!</label>
			<label kind="assignment" x="17" y="17">init_assignment_example()</label>
		</transition>
	</template>
	<template>
		<name>Drone</name>
		<parameter>int x, int y</parameter>
		<declaration>int move_policy_next_move_idx;

const int MOVE_POLICY_LEN = 8;
MovingPolicyStep move_policy[MOVE_POLICY_LEN] = {
    { 1,  0}, // Right
    { 1,  0}, // Right
    { 0,  1}, // Down
    { 0,  1}, // Down
    {-1,  0}, // Left
    {-1,  0}, // Left
    { 0, -1}, // Up
    { 0, -1}  // Up
};

void move_one_step() {
    x += move_policy[move_policy_next_move_idx].x_inc;
    y += move_policy[move_policy_next_move_idx].y_inc;

    move_policy_next_move_idx += 1;
    if(move_policy_next_move_idx &gt;= MOVE_POLICY_LEN)
        move_policy_next_move_idx = 0;
}
</declaration>
		<location id="id3" x="-238" y="-102">
		</location>
		<location id="id4" x="-76" y="-102">
		</location>
		<location id="id5" x="110" y="-102">
			<name x="100" y="-136">Scanning</name>
		</location>
		<location id="id6" x="-42" y="127">
		</location>
		<init ref="id3"/>
		<transition id="id7">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="select" x="119" y="-85">x_in : int[0, N_COLS-1],
y_in : int[0, N_ROWS-1],
x_zr : int[0, N_COLS-1],
y_zr : int[0, N_ROWS-1]</label>
			<label kind="guard" x="119" y="0">x - N_v &lt;= x_in &lt;= x + N_v &amp;&amp;
y - N_v &lt;= y_in &lt;= y + N_v &amp;&amp;
x - N_v &lt;= x_zr &lt;= x + N_v &amp;&amp;
y - N_v &lt;= y_zr &lt;= y + N_v</label>
			<label kind="synchronisation" x="119" y="85">assist_request[x_in][y_in]!</label>
			<nail x="110" y="127"/>
		</transition>
		<transition id="id8">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="assignment" x="-58" y="-102">move_one_step()</label>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-221" y="-102">init_done?</label>
		</transition>
	</template>
	<template>
		<name>FirstResponder</name>
		<location id="id10" x="0" y="0">
		</location>
		<init ref="id10"/>
	</template>
	<template>
		<name>Survivor</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t; // Death timer

void move() {
    // TODO
}
</declaration>
		<location id="id11" x="-187" y="127">
			<name x="-213" y="144">Moving</name>
		</location>
		<location id="id12" x="245" y="-221">
			<name x="221" y="-280">BeingAssisted</name>
			<label kind="invariant" x="221" y="-263">t &lt;= T_v</label>
		</location>
		<location id="id13" x="245" y="127">
			<name x="169" y="144">ActingZeroResponder</name>
		</location>
		<location id="id14" x="-348" y="-42">
			<committed/>
		</location>
		<location id="id15" x="-187" y="-221">
			<name x="-204" y="-280">InNeed</name>
			<label kind="invariant" x="-204" y="-263">t &lt;= T_v</label>
		</location>
		<location id="id16" x="-544" y="-42">
		</location>
		<location id="id17" x="25" y="-102">
			<name x="9" y="-144">Dead</name>
		</location>
		<location id="id18" x="246" y="-59">
			<name x="270" y="-68">Safe</name>
		</location>
		<init ref="id16"/>
		<transition id="id19">
			<source ref="id12"/>
			<target ref="id17"/>
			<label kind="guard" x="136" y="-161">t &gt; T_v</label>
		</transition>
		<transition id="id20">
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="-136" y="-161">t &gt; T_v</label>
		</transition>
		<transition id="id21">
			<source ref="id13"/>
			<target ref="id18"/>
		</transition>
		<transition id="id22">
			<source ref="id12"/>
			<target ref="id18"/>
		</transition>
		<transition id="id23">
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="comments" x="-178" y="8">TODO: move()</label>
			<nail x="-187" y="-42"/>
		</transition>
		<transition id="id24">
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="guard" x="-450" y="51">!is_fire_near(x, y, 1)</label>
		</transition>
		<transition id="id25">
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-510" y="-68">init_done?</label>
		</transition>
		<transition id="id26">
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-76" y="-246">assist_start[x][y]?</label>
		</transition>
		<transition id="id27">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-442" y="-161">is_fire_near(x, y, 1)</label>
			<label kind="assignment" x="-331" y="-136">t = 0</label>
		</transition>
		<transition id="id28">
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-85" y="102">assist_request[x][y]?</label>
		</transition>
	</template>
	<system>initializer = Initializer();

drone_1 = Drone(1, 1);
survivor_1 = Survivor(3, 3);

system initializer, survivor_1;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
