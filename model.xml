<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/***********************************
 Configuration Parameters
************************************/

// Grid size
const int N_COLS = 10; // x
const int N_ROWS = 10; // y

// Drone vision range
const int N_v = 2;

// Assistance duration of first responders
const int T_fr = 5;
// Assistance duration of zero responders
const int T_zr = 8;

// Time after which a survivor in need dies
const int T_v = 15;


/***********************************
 Global Variables &amp; Constants
************************************/

// Map cell status enumeration
const int CELL_FIRST =          0;

const int CELL_EMPTY =          CELL_FIRST + 0;
const int CELL_FIRE =           CELL_FIRST + 1;
const int CELL_EXIT =           CELL_FIRST + 2;
const int CELL_DRONE =          CELL_FIRST + 3;
const int CELL_FIRST_RESP =     CELL_FIRST + 4;
const int CELL_SURVIVOR =       CELL_FIRST + 5;
const int CELL_ZERO_RESP =      CELL_FIRST + 6;
const int CELL_IN_NEED =        CELL_FIRST + 7;

const int CELL_LAST =           CELL_FIRST + 7;

// Map
int[CELL_FIRST,CELL_LAST] map[N_COLS][N_ROWS];

// Channels
chan zr_assist[N_COLS][N_ROWS];        // Channels used by drones to instruct survivors to act as zero responders and assist a survivor in need
chan call_fr[N_COLS][N_ROWS];          // Channels used by drones to instruct survivors to go call a first responder
chan fr_assist[N_COLS][N_ROWS];        // Channels used by survivors to instruct first responders to assist a survivor in need
chan assist_success[N_COLS][N_ROWS];   // Channels for signaling that an assistance was completed successfully

// The global initializion channel
urgent broadcast chan init_done;

// Moving policy step struct
typedef struct {
    int x_inc;
    int y_inc;
} MovingPolicyStep;


/***********************************
 Util functions
************************************/

// Returns the maximum between the two given integers
int imax(int a, int b) {
    if (a &gt;= b)
        return a;
    else
        return b;
}

// Returns the minimum between the two given integers
int imin(int a, int b) {
    if (a &lt;= b)
        return a;
    else
        return b;
}

// Returns the interger value clamped to the range [lower, upper]
int iclamp(int value, int lower, int upper) {
    return imax(lower, imin(value, upper));
}

// Returns the distance between two points in the grid
int distance(int x1, int y1, int x2, int y2) {
    int x_distance = x1 - x2;
    int y_distance = y1 - y2;

    if (x_distance &lt; 0)
        x_distance = 0 - x_distance;
    if (y_distance &lt; 0)
        y_distance = 0 - y_distance;

    return imax(x_distance, y_distance);
}

// Functions

bool is_fire_near(int x, int y, const int radius) {
    int x_lower = imax(x - radius, 0);
    int x_upper = imin(x + radius, N_COLS - 1);
    int y_lower = imax(y - radius, 0);
    int y_upper = imin(y + radius, N_ROWS - 1);

    int i, j;
    for (i = x_lower; i &lt;= x_upper; i += 1)
        for (j = y_lower; j &lt;= y_upper; j += 1)
            if (map[x][j] == CELL_FIRE)
                return true;

    return false;
}
</declaration>
	<template>
		<name x="5" y="5">Initializer</name>
		<declaration>void init_assignment_example() {
    // Init the map will all empty cells
    for(x : int[0, N_ROWS-1])
        for(y : int[0, N_COLS-1])
            map[x][y] = CELL_EMPTY;

    // Set fires
    map[5][1] = CELL_FIRE;
    map[6][1] = CELL_FIRE;
    map[5][2] = CELL_FIRE;
    map[6][2] = CELL_FIRE;
    map[4][3] = CELL_FIRE;
    map[5][3] = CELL_FIRE;
    map[6][3] = CELL_FIRE;
    map[4][4] = CELL_FIRE;
    map[5][4] = CELL_FIRE;

    // Set exits
    map[0][4] = CELL_EXIT;
    map[9][4] = CELL_EXIT;
    map[0][5] = CELL_EXIT;
    map[9][5] = CELL_EXIT;
}
</declaration>
		<location id="id0" x="255" y="0">
		</location>
		<location id="id1" x="42" y="0">
			<committed/>
		</location>
		<location id="id2" x="-221" y="0">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition id="id3">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="68" y="0">init_done!</label>
		</transition>
		<transition id="id4">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="assignment" x="-204" y="0">init_assignment_example()</label>
		</transition>
	</template>
	<template>
		<name>Drone</name>
		<parameter>int x, int y</parameter>
		<declaration>int move_policy_next_move_idx;

const int MOVE_POLICY_LEN = 8;
MovingPolicyStep move_policy[MOVE_POLICY_LEN] = {
    { 1,  0}, // Right
    { 1,  0}, // Right
    { 0,  1}, // Down
    { 0,  1}, // Down
    {-1,  0}, // Left
    {-1,  0}, // Left
    { 0, -1}, // Up
    { 0, -1}  // Up
};

void move_one_step() {
    x += move_policy[move_policy_next_move_idx].x_inc;
    y += move_policy[move_policy_next_move_idx].y_inc;

    move_policy_next_move_idx += 1;
    if(move_policy_next_move_idx &gt;= MOVE_POLICY_LEN)
        move_policy_next_move_idx = 0;
}
</declaration>
		<location id="id5" x="-348" y="-102">
		</location>
		<location id="id6" x="-76" y="-102">
		</location>
		<location id="id7" x="110" y="-102">
			<name x="100" y="-136">Scanning</name>
		</location>
		<location id="id8" x="-42" y="127">
		</location>
		<init ref="id5"/>
		<transition id="id9">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="119" y="-76">xx : int[0, N_COLS-1],
yy : int[0, N_ROWS-1]</label>
			<label kind="guard" x="119" y="0">x - N_v &lt;= xx &lt;= x + N_v &amp;&amp;
y - N_v &lt;= yy &lt;= y + N_v &amp;&amp;
map[xx][yy] == CELL_IN_NEED</label>
			<label kind="synchronisation" x="119" y="85">zr_assist[xx][yy]!</label>
			<nail x="110" y="127"/>
		</transition>
		<transition id="id10">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="assignment" x="-58" y="-102">move_one_step()</label>
		</transition>
		<transition id="id11">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-323" y="-102">init_done?</label>
			<label kind="assignment" x="-323" y="-85">map[x][y] = CELL_DRONE</label>
		</transition>
	</template>
	<template>
		<name>FirstResponder</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;</declaration>
		<location id="id12" x="170" y="-161">
			<name x="143" y="-203">Assisting</name>
		</location>
		<location id="id13" x="-552" y="-161">
			<name x="-586" y="-203">Available</name>
		</location>
		<location id="id14" x="-850" y="-161">
		</location>
		<location id="id15" x="-195" y="-161">
			<name x="-220" y="-203">Moving</name>
		</location>
		<init ref="id14"/>
		<transition id="id16">
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="guard" x="-144" y="-161">t &gt;= 10</label>
			<label kind="assignment" x="-144" y="-144">t = 0</label>
			<label kind="comments" x="-144" y="-119">TODO: time constraints based on distance from survivor in need</label>
		</transition>
		<transition id="id17">
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-518" y="-161">fr_assist[x][y]?</label>
			<label kind="assignment" x="-518" y="-144">t = 0</label>
		</transition>
		<transition id="id18">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-501" y="58">t &gt;= T_fr</label>
			<label kind="synchronisation" x="-501" y="75">assist_success[x][y]!</label>
			<nail x="170" y="58"/>
			<nail x="-552" y="59"/>
		</transition>
		<transition id="id19">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-825" y="-161">init_done?</label>
			<label kind="assignment" x="-825" y="-144">map[x][y] = CELL_FIRST_RESP</label>
		</transition>
	</template>
	<template>
		<name>Survivor</name>
		<parameter>int x, int y</parameter>
		<declaration>clock t;

// Distance variable used to emulate the time taken for this survivor to perform grid movements
int move_time = 0;

// Target coordinates that this survivor should move to
int targ_x;
int targ_y;

void do_zr_assist(int xx, int yy) {
    // Set moving time
    move_time = distance(x, y, xx, yy);
    
    // Set assisted coords notify the end of the assistance later
    targ_x = xx;
    targ_y = yy;
    
    // Set our cell as zero responder
    map[x][y] = CELL_ZERO_RESP;
}

void do_call_fr(int xx, int yy) {
    // Set moving time
    move_time = distance(x, y, xx, yy);
    
    // Set coords of the first responder to signal it once reached
    targ_x = xx;
    targ_y = yy;
    
    // Set our cell as zero responder
    map[x][y] = CELL_ZERO_RESP;
}

void move() {
    // TODO
}
</declaration>
		<location id="id20" x="-136" y="179">
			<name x="-187" y="196">Moving</name>
		</location>
		<location id="id21" x="314" y="0">
			<name x="229" y="17">ActingZeroResponder</name>
		</location>
		<location id="id22" x="-382" y="-67">
			<committed/>
		</location>
		<location id="id23" x="-136" y="-339">
			<name x="-161" y="-398">InNeed</name>
			<label kind="invariant" x="-161" y="-381">t &lt;= T_v</label>
		</location>
		<location id="id24" x="-629" y="-67">
		</location>
		<location id="id25" x="170" y="-229">
			<name x="153" y="-271">Dead</name>
		</location>
		<location id="id26" x="773" y="0">
			<name x="797" y="-9">Safe</name>
		</location>
		<location id="id27" x="331" y="331">
			<name x="246" y="297">CallingFirstResponder</name>
		</location>
		<init ref="id24"/>
		<transition id="id28">
			<source ref="id25"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="255" y="-229">assist_success[x][y]?</label>
			<label kind="comments" x="255" y="-272">Consume signals to avoid deadlocking
the first/zero responder</label>
			<nail x="238" y="-255"/>
			<nail x="238" y="-204"/>
		</transition>
		<transition id="id29">
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="34" y="-381">assist_success[x][y]?</label>
			<label kind="assignment" x="34" y="-365">map[x][y] = CELL_EMPTY</label>
			<nail x="773" y="-340"/>
		</transition>
		<transition id="id30">
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="guard" x="425" y="340">t &gt;= move_time</label>
			<label kind="synchronisation" x="425" y="357">fr_assist[targ_x][targ_y]!</label>
			<nail x="773" y="331"/>
		</transition>
		<transition id="id31">
			<source ref="id20"/>
			<target ref="id27"/>
			<label kind="select" x="17" y="340">xx : int[0, N_COLS-1],
yy : int[0, N_ROWS-1]</label>
			<label kind="synchronisation" x="17" y="382">call_fr[xx][yy]?</label>
			<label kind="assignment" x="17" y="399">do_call_fr(xx, yy)</label>
			<nail x="8" y="331"/>
		</transition>
		<transition id="id32">
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="guard" x="-110" y="-271">t &gt;= T_v</label>
			<label kind="assignment" x="-110" y="-254">map[x][y] = CELL_EMPTY</label>
			<nail x="-136" y="-228"/>
		</transition>
		<transition id="id33">
			<source ref="id21"/>
			<target ref="id26"/>
			<label kind="guard" x="399" y="-42">t &gt;= T_zr + move_time</label>
			<label kind="synchronisation" x="399" y="-25">assist_success[targ_x][targ_y]!</label>
		</transition>
		<transition id="id34">
			<source ref="id20"/>
			<target ref="id22"/>
			<label kind="comments" x="-255" y="-50">TODO: move()</label>
			<nail x="-136" y="-67"/>
		</transition>
		<transition id="id35">
			<source ref="id22"/>
			<target ref="id20"/>
			<label kind="guard" x="-450" y="51">!is_fire_near(x, y, 1)</label>
		</transition>
		<transition id="id36">
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-611" y="-67">init_done?</label>
			<label kind="assignment" x="-611" y="-50">map[x][y] = CELL_SURVIVOR</label>
		</transition>
		<transition id="id37">
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-467" y="-255">is_fire_near(x, y, 1)</label>
			<label kind="assignment" x="-467" y="-238">map[x][y] = CELL_IN_NEED,
t = 0</label>
		</transition>
		<transition id="id38">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="select" x="17" y="-85">xx : int[0, N_COLS-1],
yy : int[0, N_ROWS-1]</label>
			<label kind="synchronisation" x="17" y="-43">zr_assist[xx][yy]?</label>
			<label kind="assignment" x="17" y="-26">do_zr_assist(xx, yy)</label>
			<label kind="comments" x="-42" y="127">Synchronize with the drone non-deterministically
xx and yy are the target coords</label>
			<nail x="8" y="0"/>
		</transition>
	</template>
	<system>initializer = Initializer();

drone_1 = Drone(1, 1);
survivor_1 = Survivor(2, 6); // Survivor
survivor_2 = Survivor(4, 2); // In need
first_responder_1 = FirstResponder(2, 3);

system initializer, drone_1, survivor_1, survivor_2, first_responder_1;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
